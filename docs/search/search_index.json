{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Just Another Web Tool JAWT is a web development toolchain that enables building minimal, performant web applications using a declarative approach. Write your applications using JML , a domain-specific language that compiles to optimised web standards\u2014HTML for pages, JavaScript for interactive components, and WebAssembly for performance-critical modules. What is JAWT? JAWT provides a unified development experience through its intelligent compilation system. Instead of juggling multiple technologies and build configurations, you write everything in JML and let JAWT handle the complexity of modern web development. Key Features Single Language, Multiple Targets : Write JML code that compiles to HTML, JavaScript, and WebAssembly as needed Component-Driven Architecture : Build reusable components with clear interfaces and composition patterns Zero Configuration : Works out of the box with sensible defaults whilst remaining customisable Hot Module Replacement : See changes instantly during development with intelligent reloading Optimised Builds : Automatic code splitting, tree shaking, and performance optimisation Type Safety : Leverage TypeScript-like type checking for robust applications Understanding JML JML combines the structural clarity of markup languages with TypeScript-like scripting capabilities. Every JML file begins with a document type declaration that determines its compilation target: _doctype page home // Compiles to HTML document _doctype component Button // Compiles to JavaScript web component _doctype module calculator // Compiles to WebAssembly module Document Types Explained Pages define complete web pages with metadata and structure. They compile to HTML documents and serve as your application's entry points: _doctype page dashboard import component Layout from \"components/layout\" Page { title: \"Dashboard - My App\" description: \"Application dashboard with analytics\" Layout { section: \"dashboard\" showSidebar: true } } Components encapsulate reusable UI elements with properties, state, and event handling. They compile to modern JavaScript web components: _doctype component UserCard Container { style: \"bg-white shadow-md rounded-lg p-6\" Text { content: props.userName style: \"text-xl font-semibold text-gray-800\" } Button { text: \"View Profile\" onClick: () => navigateToProfile(props.userId) style: \"mt-4 bg-blue-500 text-white px-4 py-2 rounded\" } } Modules handle computational logic and performance-critical operations. They compile to WebAssembly for near-native performance: _doctype module imageProcessor export function processImage(data: ImageData): ImageData { // Heavy image processing logic return optimiseImage(data) } function optimiseImage(data: ImageData): ImageData { // WebAssembly-optimised processing } Development Workflow JAWT's CLI provides everything you need to build applications efficiently: Create a new project: jawt init my-app Develop with hot reload: jawt run Build for production: jawt build Debug when needed: jawt debug The unified compiler handles all document types intelligently, resolving dependencies across your entire application and generating optimised output for each target. Architecture Philosophy JAWT follows a clear separation of concerns: Pages handle structure and routing Components manage user interaction and state Modules provide computational performance This architecture enables optimal loading strategies\u2014pages load instantly, components activate when needed, and modules execute computations at near-native speed. Quick Start Example Here's a complete JAWT application structure: my-app/ \u251c\u2500\u2500 app/ \u2502 \u251c\u2500\u2500 index.jml # Home page \u2502 \u2514\u2500\u2500 about/index.jml # About page \u251c\u2500\u2500 components/ \u2502 \u251c\u2500\u2500 layout.jml # Shared layout \u2502 \u2514\u2500\u2500 user-card.jml # Reusable component \u2514\u2500\u2500 modules/ \u2514\u2500\u2500 analytics.jml # Performance module Page ( app/index.jml ): _doctype page home import component Layout from \"components/layout\" Page { title: \"Welcome to My App\" Layout { showWelcome: true } } Component ( components/layout.jml ): _doctype component Layout import module analytics from \"modules/analytics\" Container { style: \"min-h-screen bg-gray-50\" Header { style: \"bg-white shadow-sm p-4\" if (props.showWelcome) { Text { content: \"Welcome!\" style: \"text-2xl font-bold\" } } } onClick: () => analytics.trackPageView() } Browser Support JAWT generates modern web standards that work across all current browsers: HTML5 : Semantic, accessible markup ES2020+ : Modern JavaScript with automatic polyfills WebAssembly : Supported in all major browsers since 2017 CSS Grid/Flexbox : Modern layout with Tailwind CSS integration Next Steps Ready to start building with JAWT? Here's where to go next: Getting Started Installation & Setup - Install JAWT and create your first project Tutorial - Build a simple application step by step Project Structure - Understand how JAWT projects are organised Language Reference JML Syntax - Complete JML language specification Pages - Creating pages and handling routing Components - Building interactive components Modules - Writing WebAssembly modules Advanced Topics Architecture - Understanding JAWT's compilation system CLI Reference - Complete command-line interface guide Configuration - Customising your build process Deployment - Publishing your applications Resources Examples - Sample applications and patterns Migration Guide - Moving from other tools FAQ - Common questions and solutions Contributing - Help improve JAWT","title":"Home"},{"location":"#just-another-web-tool","text":"JAWT is a web development toolchain that enables building minimal, performant web applications using a declarative approach. Write your applications using JML , a domain-specific language that compiles to optimised web standards\u2014HTML for pages, JavaScript for interactive components, and WebAssembly for performance-critical modules.","title":"Just Another Web Tool"},{"location":"#what-is-jawt","text":"JAWT provides a unified development experience through its intelligent compilation system. Instead of juggling multiple technologies and build configurations, you write everything in JML and let JAWT handle the complexity of modern web development.","title":"What is JAWT?"},{"location":"#key-features","text":"Single Language, Multiple Targets : Write JML code that compiles to HTML, JavaScript, and WebAssembly as needed Component-Driven Architecture : Build reusable components with clear interfaces and composition patterns Zero Configuration : Works out of the box with sensible defaults whilst remaining customisable Hot Module Replacement : See changes instantly during development with intelligent reloading Optimised Builds : Automatic code splitting, tree shaking, and performance optimisation Type Safety : Leverage TypeScript-like type checking for robust applications","title":"Key Features"},{"location":"#understanding-jml","text":"JML combines the structural clarity of markup languages with TypeScript-like scripting capabilities. Every JML file begins with a document type declaration that determines its compilation target: _doctype page home // Compiles to HTML document _doctype component Button // Compiles to JavaScript web component _doctype module calculator // Compiles to WebAssembly module","title":"Understanding JML"},{"location":"#document-types-explained","text":"Pages define complete web pages with metadata and structure. They compile to HTML documents and serve as your application's entry points: _doctype page dashboard import component Layout from \"components/layout\" Page { title: \"Dashboard - My App\" description: \"Application dashboard with analytics\" Layout { section: \"dashboard\" showSidebar: true } } Components encapsulate reusable UI elements with properties, state, and event handling. They compile to modern JavaScript web components: _doctype component UserCard Container { style: \"bg-white shadow-md rounded-lg p-6\" Text { content: props.userName style: \"text-xl font-semibold text-gray-800\" } Button { text: \"View Profile\" onClick: () => navigateToProfile(props.userId) style: \"mt-4 bg-blue-500 text-white px-4 py-2 rounded\" } } Modules handle computational logic and performance-critical operations. They compile to WebAssembly for near-native performance: _doctype module imageProcessor export function processImage(data: ImageData): ImageData { // Heavy image processing logic return optimiseImage(data) } function optimiseImage(data: ImageData): ImageData { // WebAssembly-optimised processing }","title":"Document Types Explained"},{"location":"#development-workflow","text":"JAWT's CLI provides everything you need to build applications efficiently: Create a new project: jawt init my-app Develop with hot reload: jawt run Build for production: jawt build Debug when needed: jawt debug The unified compiler handles all document types intelligently, resolving dependencies across your entire application and generating optimised output for each target.","title":"Development Workflow"},{"location":"#architecture-philosophy","text":"JAWT follows a clear separation of concerns: Pages handle structure and routing Components manage user interaction and state Modules provide computational performance This architecture enables optimal loading strategies\u2014pages load instantly, components activate when needed, and modules execute computations at near-native speed.","title":"Architecture Philosophy"},{"location":"#quick-start-example","text":"Here's a complete JAWT application structure: my-app/ \u251c\u2500\u2500 app/ \u2502 \u251c\u2500\u2500 index.jml # Home page \u2502 \u2514\u2500\u2500 about/index.jml # About page \u251c\u2500\u2500 components/ \u2502 \u251c\u2500\u2500 layout.jml # Shared layout \u2502 \u2514\u2500\u2500 user-card.jml # Reusable component \u2514\u2500\u2500 modules/ \u2514\u2500\u2500 analytics.jml # Performance module Page ( app/index.jml ): _doctype page home import component Layout from \"components/layout\" Page { title: \"Welcome to My App\" Layout { showWelcome: true } } Component ( components/layout.jml ): _doctype component Layout import module analytics from \"modules/analytics\" Container { style: \"min-h-screen bg-gray-50\" Header { style: \"bg-white shadow-sm p-4\" if (props.showWelcome) { Text { content: \"Welcome!\" style: \"text-2xl font-bold\" } } } onClick: () => analytics.trackPageView() }","title":"Quick Start Example"},{"location":"#browser-support","text":"JAWT generates modern web standards that work across all current browsers: HTML5 : Semantic, accessible markup ES2020+ : Modern JavaScript with automatic polyfills WebAssembly : Supported in all major browsers since 2017 CSS Grid/Flexbox : Modern layout with Tailwind CSS integration","title":"Browser Support"},{"location":"#next-steps","text":"Ready to start building with JAWT? Here's where to go next:","title":"Next Steps"},{"location":"#getting-started","text":"Installation & Setup - Install JAWT and create your first project Tutorial - Build a simple application step by step Project Structure - Understand how JAWT projects are organised","title":"Getting Started"},{"location":"#language-reference","text":"JML Syntax - Complete JML language specification Pages - Creating pages and handling routing Components - Building interactive components Modules - Writing WebAssembly modules","title":"Language Reference"},{"location":"#advanced-topics","text":"Architecture - Understanding JAWT's compilation system CLI Reference - Complete command-line interface guide Configuration - Customising your build process Deployment - Publishing your applications","title":"Advanced Topics"},{"location":"#resources","text":"Examples - Sample applications and patterns Migration Guide - Moving from other tools FAQ - Common questions and solutions Contributing - Help improve JAWT","title":"Resources"},{"location":"installation/","text":"Installation & Setup Getting JAWT up and running is straightforward. Choose your platform below and follow the simple installation steps. Quick Installation Linux & macOS (Soon) Install JAWT with a single command that automatically downloads and configures everything: curl -fsSL https://raw.githubusercontent.com/yasufadhili/jawt/main/install.sh | sudo bash This script will: Detect your system architecture automatically Download the latest JAWT release for your platform Install JAWT to the appropriate system directory Configure your PATH environment variable Set up all necessary permissions Windows (Soon) Download and run the MSI installer: Download JAWT for Windows The installer will: Install JAWT to Program Files Add JAWT to your system PATH Create Start Menu shortcuts Set up file associations for .jml files Verify Installation Once installed, verify JAWT is working correctly by checking the version: jawt --version You should see output similar to: JAWT v0.1.0 Platform: linux/amd64 System Requirements JAWT has minimal system requirements and works on: Supported Platforms Linux : x64, ARM64 (Ubuntu 18.04+, CentOS 7+, Debian 9+) macOS : x64, Apple Silicon (macOS 10.15+) Windows : x64, ARM64 (Windows 10+, Windows Server 2019+) Dependencies No external dependencies required - JAWT is a single binary Modern browser for development server (Firefox, Edge, Chrome, Safari) Text editor of your choice (VS Code, Vim, Emacs, etc.) Troubleshooting Permission Issues (Linux/macOS) If you encounter permission errors, ensure you're running the install script with sudo : curl -fsSL https://raw.githubusercontent.com/yasufadhili/jawt/main/install.sh | sudo bash Command Not Found If jawt --version returns \"command not found\": Linux/macOS : Restart your terminal or run: source ~/.bashrc # or ~/.zshrc if using zsh Windows : Restart Command Prompt or PowerShell Firewall/Antivirus Warnings Some antivirus software may flag the installer. JAWT is safe to install - you can: - Add an exception for the JAWT installer - Download directly from GitHub releases if needed - Build from source if you prefer (see Contributing guide) Manual Installation If you prefer manual installation or need a specific version: Visit the JAWT releases page Download the appropriate archive for your platform Extract the jawt binary to a directory in your PATH Make the binary executable (Linux/macOS): chmod +x jawt Development Environment Setup JAWT currently has no support in any major text editor or IDE. You can still just write JML code in any text editor Configuration JAWT works with zero configuration, but you can customise behaviour: Global Configuration JAWT looks for configuration in: ~/.jawt/config.json (Linux/macOS) %APPDATA%\\jawt\\config.json (Windows) Project Configuration Each project can have its own jawt.config.json file for project-specific settings. Updating JAWT Automatic Updates JAWT can update itself: jawt update Manual Updates Re-run the installation script to get the latest version: Linux/macOS : curl -fsSL https://raw.githubusercontent.com/yasufadhili/jawt/main/install.sh | sudo bash Windows : Download and run the latest MSI installer Uninstalling JAWT Linux/macOS sudo rm /usr/local/bin/jawt sudo rm -rf ~/.jawt Windows Use \"Add or Remove Programs\" in Windows Settings, or run: jawt uninstall Next Steps Now that JAWT is installed, you're ready to start building: Create Your First Project - Build a simple JAWT application from scratch Project Structure - Understand how JAWT projects are organised JML Quick Start - Learn the basics of JML syntax CLI Reference - Explore all available JAWT commands","title":"Installation"},{"location":"installation/#installation-setup","text":"Getting JAWT up and running is straightforward. Choose your platform below and follow the simple installation steps.","title":"Installation &amp; Setup"},{"location":"installation/#quick-installation","text":"","title":"Quick Installation"},{"location":"installation/#linux-macos-soon","text":"Install JAWT with a single command that automatically downloads and configures everything: curl -fsSL https://raw.githubusercontent.com/yasufadhili/jawt/main/install.sh | sudo bash This script will: Detect your system architecture automatically Download the latest JAWT release for your platform Install JAWT to the appropriate system directory Configure your PATH environment variable Set up all necessary permissions","title":"Linux &amp; macOS (Soon)"},{"location":"installation/#windows-soon","text":"Download and run the MSI installer: Download JAWT for Windows The installer will: Install JAWT to Program Files Add JAWT to your system PATH Create Start Menu shortcuts Set up file associations for .jml files","title":"Windows (Soon)"},{"location":"installation/#verify-installation","text":"Once installed, verify JAWT is working correctly by checking the version: jawt --version You should see output similar to: JAWT v0.1.0 Platform: linux/amd64","title":"Verify Installation"},{"location":"installation/#system-requirements","text":"JAWT has minimal system requirements and works on:","title":"System Requirements"},{"location":"installation/#supported-platforms","text":"Linux : x64, ARM64 (Ubuntu 18.04+, CentOS 7+, Debian 9+) macOS : x64, Apple Silicon (macOS 10.15+) Windows : x64, ARM64 (Windows 10+, Windows Server 2019+)","title":"Supported Platforms"},{"location":"installation/#dependencies","text":"No external dependencies required - JAWT is a single binary Modern browser for development server (Firefox, Edge, Chrome, Safari) Text editor of your choice (VS Code, Vim, Emacs, etc.)","title":"Dependencies"},{"location":"installation/#troubleshooting","text":"","title":"Troubleshooting"},{"location":"installation/#permission-issues-linuxmacos","text":"If you encounter permission errors, ensure you're running the install script with sudo : curl -fsSL https://raw.githubusercontent.com/yasufadhili/jawt/main/install.sh | sudo bash","title":"Permission Issues (Linux/macOS)"},{"location":"installation/#command-not-found","text":"If jawt --version returns \"command not found\": Linux/macOS : Restart your terminal or run: source ~/.bashrc # or ~/.zshrc if using zsh Windows : Restart Command Prompt or PowerShell","title":"Command Not Found"},{"location":"installation/#firewallantivirus-warnings","text":"Some antivirus software may flag the installer. JAWT is safe to install - you can: - Add an exception for the JAWT installer - Download directly from GitHub releases if needed - Build from source if you prefer (see Contributing guide)","title":"Firewall/Antivirus Warnings"},{"location":"installation/#manual-installation","text":"If you prefer manual installation or need a specific version: Visit the JAWT releases page Download the appropriate archive for your platform Extract the jawt binary to a directory in your PATH Make the binary executable (Linux/macOS): chmod +x jawt","title":"Manual Installation"},{"location":"installation/#development-environment-setup","text":"JAWT currently has no support in any major text editor or IDE. You can still just write JML code in any text editor","title":"Development Environment Setup"},{"location":"installation/#configuration","text":"JAWT works with zero configuration, but you can customise behaviour:","title":"Configuration"},{"location":"installation/#global-configuration","text":"JAWT looks for configuration in: ~/.jawt/config.json (Linux/macOS) %APPDATA%\\jawt\\config.json (Windows)","title":"Global Configuration"},{"location":"installation/#project-configuration","text":"Each project can have its own jawt.config.json file for project-specific settings.","title":"Project Configuration"},{"location":"installation/#updating-jawt","text":"","title":"Updating JAWT"},{"location":"installation/#automatic-updates","text":"JAWT can update itself: jawt update","title":"Automatic Updates"},{"location":"installation/#manual-updates","text":"Re-run the installation script to get the latest version: Linux/macOS : curl -fsSL https://raw.githubusercontent.com/yasufadhili/jawt/main/install.sh | sudo bash Windows : Download and run the latest MSI installer","title":"Manual Updates"},{"location":"installation/#uninstalling-jawt","text":"","title":"Uninstalling JAWT"},{"location":"installation/#linuxmacos","text":"sudo rm /usr/local/bin/jawt sudo rm -rf ~/.jawt","title":"Linux/macOS"},{"location":"installation/#windows","text":"Use \"Add or Remove Programs\" in Windows Settings, or run: jawt uninstall","title":"Windows"},{"location":"installation/#next-steps","text":"Now that JAWT is installed, you're ready to start building: Create Your First Project - Build a simple JAWT application from scratch Project Structure - Understand how JAWT projects are organised JML Quick Start - Learn the basics of JML syntax CLI Reference - Explore all available JAWT commands","title":"Next Steps"},{"location":"tutorial/first-page/","text":"Your First JAWT Page In this tutorial, you'll learn how to create your first web page using JML. Think of this as your \"Hello, World!\" moment with JAWT\u2014we'll focus purely on page creation using built-in components, without any external dependencies or complex features. What You'll Learn How to set up a basic JAWT project Understanding JML page syntax and structure Using built-in components like Container , Text , and Button Applying styling with Tailwind CSS classes Creating a complete, functional web page Prerequisites JAWT installed on your system Basic understanding of HTML and CSS concepts Familiarity with Tailwind CSS is helpful but not required Setting Up Your Project Let's start by creating a new JAWT project: jawt init my-first-page cd my-first-page This creates a project structure like this: my-first-page/ \u251c\u2500\u2500 app/ \u2502 \u2514\u2500\u2500 index.jml # Your main page file \u251c\u2500\u2500 components/ # For future components \u251c\u2500\u2500 assets/ # Static assets \u251c\u2500\u2500 app.json # Project configuration \u2514\u2500\u2500 jawt.config.json # Build configuration Understanding JML Page Structure Every JML page follows a specific pattern. Let's examine the basic structure: _doctype page pageName Page { title: \"Page Title\" description: \"Page description\" // Single root component goes here Container { // Page content } } Key Components of a JML Page Document Type Declaration : _doctype page pageName - This tells JAWT that this file should compile to an HTML page Page Component : The Page wrapper that contains metadata and your page content Single Root Component : Pages can only have one direct child component (like React's JSX) Creating Your First Page Let's replace the default content in app/index.jml with a simple welcome page: _doctype page welcome Page { title: \"Welcome to JAWT\" description: \"My first JAWT page using JML\" Container { style: \"min-h-screen bg-gray-50 flex flex-col items-center justify-center p-8\" Text { text: \"Hello, JAWT!\" style: \"text-4xl font-bold text-blue-600 mb-4\" } Text { text: \"This is my first page built with JML\" style: \"text-lg text-gray-700 mb-8 text-center\" } Button { text: \"Welcome Button\" style: \"bg-blue-500 hover:bg-blue-600 text-white px-6 py-2 rounded-lg shadow-md transition-colors\" } } } Understanding Built-in Components JAWT provides several built-in components that you can use immediately: Container The Container component is like a <div> in HTML\u2014it groups other elements together. Container { style: \"flex flex-col space-y-4 p-6\" // Child components go here } Text The Text component displays text content, similar to <p> , <h1> , etc. in HTML. Text { text: \"Your text here\" style: \"text-xl font-semibold text-gray-800\" } Button The Button component creates clickable buttons. Button { text: \"Click me!\" style: \"bg-green-500 text-white px-4 py-2 rounded hover:bg-green-600\" } Styling with Tailwind CSS JAWT uses Tailwind CSS for styling. You apply styles using the style property with Tailwind utility classes: Container { style: \"bg-white shadow-lg rounded-lg p-6 max-w-md mx-auto\" } Common Tailwind Patterns Here are some useful Tailwind class combinations: Centering content: style: \"flex items-center justify-center\" Card-like appearance: style: \"bg-white shadow-md rounded-lg p-6\" Responsive spacing: style: \"p-4 md:p-8 lg:p-12\" Colour schemes: style: \"bg-blue-500 text-white hover:bg-blue-600\" Building a Complete Example Let's create a more comprehensive page that showcases different components and styling: _doctype page portfolio Page { title: \"My Portfolio\" description: \"A simple portfolio page built with JAWT\" favicon: \"/favicon.ico\" Container { style: \"min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100\" Container { style: \"max-w-4xl mx-auto p-8\" Text { text: \"John Doe\" style: \"text-5xl font-bold text-gray-800 text-center mb-2\" } Text { text: \"Web Developer & Designer\" style: \"text-xl text-gray-600 text-center mb-8\" } Container { style: \"bg-white rounded-xl shadow-lg p-8 mb-8\" Text { text: \"About Me\" style: \"text-2xl font-semibold text-gray-800 mb-4\" } Text { text: \"I'm passionate about creating beautiful, functional web experiences using modern tools and technologies. JAWT allows me to build fast, efficient websites with clean, declarative code.\" style: \"text-gray-700 leading-relaxed mb-6\" } Button { text: \"View My Work\" style: \"bg-blue-500 hover:bg-blue-600 text-white px-6 py-3 rounded-lg font-medium transition-colors shadow-md\" } } Container { style: \"bg-white rounded-xl shadow-lg p-8\" Text { text: \"Skills\" style: \"text-2xl font-semibold text-gray-800 mb-6\" } Container { style: \"grid grid-cols-2 md:grid-cols-3 gap-4\" Container { style: \"bg-blue-100 text-blue-800 px-4 py-2 rounded-lg text-center\" Text { text: \"JAWT\" style: \"font-medium\" } } Container { style: \"bg-green-100 text-green-800 px-4 py-2 rounded-lg text-center\" Text { text: \"JavaScript\" style: \"font-medium\" } } Container { style: \"bg-purple-100 text-purple-800 px-4 py-2 rounded-lg text-center\" Text { text: \"CSS\" style: \"font-medium\" } } Container { style: \"bg-red-100 text-red-800 px-4 py-2 rounded-lg text-center\" Text { text: \"HTML\" style: \"font-medium\" } } Container { style: \"bg-yellow-100 text-yellow-800 px-4 py-2 rounded-lg text-center\" Text { text: \"UI Design\" style: \"font-medium\" } } Container { style: \"bg-indigo-100 text-indigo-800 px-4 py-2 rounded-lg text-center\" Text { text: \"Tailwind\" style: \"font-medium\" } } } } } } } Running Your Page To see your page in action: # Start the development server jawt run # Your page will be available at http://localhost:6500 The development server includes hot reload, so any changes you make to your JML file will automatically update in the browser. Page Properties Reference The Page component supports several properties for controlling the HTML document: Page { title: \"Page Title\" // Sets <title> tag description: \"Page description\" // Sets meta description favicon: \"/favicon.ico\" // Sets favicon name: \"internal-page-name\" // Internal identifier keywords: \"keyword1, keyword2\" // SEO keywords author: \"Your Name\" // Page author viewport: \"width=device-width, initial-scale=1.0\" // Viewport settings // Your page content Container { // ... } } Building for Production When you're ready to deploy your page: # Build optimised version jawt build # Your HTML file will be in the dist/ directory This creates a dist/ directory with your compiled page file, optimised and ready for deployment to any web server. Key Takeaways JML is Declarative : You describe what you want, not how to build it Single Root Component : Pages can only have one direct child (usually a Container or Main ) Built-in Components : Container , Text , and Button cover most basic needs Tailwind Styling : Use the style property with Tailwind utility classes Hot Reload : Changes appear instantly during development Next Steps Now that you've created your first JAWT page, you might want to explore: Creating reusable components for more complex applications Adding interactive behaviour with JML scripting Building multi-page applications with routing Integrating WebAssembly modules for performance-critical features Troubleshooting Page not loading? - Check that your _doctype page declaration is correct - Ensure your JML syntax is valid (proper braces, quotes) - Look for error messages in the terminal running jawt run Styling not appearing? - Verify Tailwind class names are correct - Check that style properties are in quotes - Remember that Tailwind uses specific class names (e.g., text-blue-600 , not text-blue ) Changes not reflecting? - Save your file and wait a moment for hot reload - Check the browser console for any errors - Try stopping and restarting jawt run Congratulations! You've just created your first JAWT page using JML. You've learned the fundamental concepts that will serve as the foundation for building more complex web applications with JAWT.","title":"First Page"},{"location":"tutorial/first-page/#your-first-jawt-page","text":"In this tutorial, you'll learn how to create your first web page using JML. Think of this as your \"Hello, World!\" moment with JAWT\u2014we'll focus purely on page creation using built-in components, without any external dependencies or complex features.","title":"Your First JAWT Page"},{"location":"tutorial/first-page/#what-youll-learn","text":"How to set up a basic JAWT project Understanding JML page syntax and structure Using built-in components like Container , Text , and Button Applying styling with Tailwind CSS classes Creating a complete, functional web page","title":"What You'll Learn"},{"location":"tutorial/first-page/#prerequisites","text":"JAWT installed on your system Basic understanding of HTML and CSS concepts Familiarity with Tailwind CSS is helpful but not required","title":"Prerequisites"},{"location":"tutorial/first-page/#setting-up-your-project","text":"Let's start by creating a new JAWT project: jawt init my-first-page cd my-first-page This creates a project structure like this: my-first-page/ \u251c\u2500\u2500 app/ \u2502 \u2514\u2500\u2500 index.jml # Your main page file \u251c\u2500\u2500 components/ # For future components \u251c\u2500\u2500 assets/ # Static assets \u251c\u2500\u2500 app.json # Project configuration \u2514\u2500\u2500 jawt.config.json # Build configuration","title":"Setting Up Your Project"},{"location":"tutorial/first-page/#understanding-jml-page-structure","text":"Every JML page follows a specific pattern. Let's examine the basic structure: _doctype page pageName Page { title: \"Page Title\" description: \"Page description\" // Single root component goes here Container { // Page content } }","title":"Understanding JML Page Structure"},{"location":"tutorial/first-page/#key-components-of-a-jml-page","text":"Document Type Declaration : _doctype page pageName - This tells JAWT that this file should compile to an HTML page Page Component : The Page wrapper that contains metadata and your page content Single Root Component : Pages can only have one direct child component (like React's JSX)","title":"Key Components of a JML Page"},{"location":"tutorial/first-page/#creating-your-first-page","text":"Let's replace the default content in app/index.jml with a simple welcome page: _doctype page welcome Page { title: \"Welcome to JAWT\" description: \"My first JAWT page using JML\" Container { style: \"min-h-screen bg-gray-50 flex flex-col items-center justify-center p-8\" Text { text: \"Hello, JAWT!\" style: \"text-4xl font-bold text-blue-600 mb-4\" } Text { text: \"This is my first page built with JML\" style: \"text-lg text-gray-700 mb-8 text-center\" } Button { text: \"Welcome Button\" style: \"bg-blue-500 hover:bg-blue-600 text-white px-6 py-2 rounded-lg shadow-md transition-colors\" } } }","title":"Creating Your First Page"},{"location":"tutorial/first-page/#understanding-built-in-components","text":"JAWT provides several built-in components that you can use immediately:","title":"Understanding Built-in Components"},{"location":"tutorial/first-page/#container","text":"The Container component is like a <div> in HTML\u2014it groups other elements together. Container { style: \"flex flex-col space-y-4 p-6\" // Child components go here }","title":"Container"},{"location":"tutorial/first-page/#text","text":"The Text component displays text content, similar to <p> , <h1> , etc. in HTML. Text { text: \"Your text here\" style: \"text-xl font-semibold text-gray-800\" }","title":"Text"},{"location":"tutorial/first-page/#button","text":"The Button component creates clickable buttons. Button { text: \"Click me!\" style: \"bg-green-500 text-white px-4 py-2 rounded hover:bg-green-600\" }","title":"Button"},{"location":"tutorial/first-page/#styling-with-tailwind-css","text":"JAWT uses Tailwind CSS for styling. You apply styles using the style property with Tailwind utility classes: Container { style: \"bg-white shadow-lg rounded-lg p-6 max-w-md mx-auto\" }","title":"Styling with Tailwind CSS"},{"location":"tutorial/first-page/#common-tailwind-patterns","text":"Here are some useful Tailwind class combinations: Centering content: style: \"flex items-center justify-center\" Card-like appearance: style: \"bg-white shadow-md rounded-lg p-6\" Responsive spacing: style: \"p-4 md:p-8 lg:p-12\" Colour schemes: style: \"bg-blue-500 text-white hover:bg-blue-600\"","title":"Common Tailwind Patterns"},{"location":"tutorial/first-page/#building-a-complete-example","text":"Let's create a more comprehensive page that showcases different components and styling: _doctype page portfolio Page { title: \"My Portfolio\" description: \"A simple portfolio page built with JAWT\" favicon: \"/favicon.ico\" Container { style: \"min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100\" Container { style: \"max-w-4xl mx-auto p-8\" Text { text: \"John Doe\" style: \"text-5xl font-bold text-gray-800 text-center mb-2\" } Text { text: \"Web Developer & Designer\" style: \"text-xl text-gray-600 text-center mb-8\" } Container { style: \"bg-white rounded-xl shadow-lg p-8 mb-8\" Text { text: \"About Me\" style: \"text-2xl font-semibold text-gray-800 mb-4\" } Text { text: \"I'm passionate about creating beautiful, functional web experiences using modern tools and technologies. JAWT allows me to build fast, efficient websites with clean, declarative code.\" style: \"text-gray-700 leading-relaxed mb-6\" } Button { text: \"View My Work\" style: \"bg-blue-500 hover:bg-blue-600 text-white px-6 py-3 rounded-lg font-medium transition-colors shadow-md\" } } Container { style: \"bg-white rounded-xl shadow-lg p-8\" Text { text: \"Skills\" style: \"text-2xl font-semibold text-gray-800 mb-6\" } Container { style: \"grid grid-cols-2 md:grid-cols-3 gap-4\" Container { style: \"bg-blue-100 text-blue-800 px-4 py-2 rounded-lg text-center\" Text { text: \"JAWT\" style: \"font-medium\" } } Container { style: \"bg-green-100 text-green-800 px-4 py-2 rounded-lg text-center\" Text { text: \"JavaScript\" style: \"font-medium\" } } Container { style: \"bg-purple-100 text-purple-800 px-4 py-2 rounded-lg text-center\" Text { text: \"CSS\" style: \"font-medium\" } } Container { style: \"bg-red-100 text-red-800 px-4 py-2 rounded-lg text-center\" Text { text: \"HTML\" style: \"font-medium\" } } Container { style: \"bg-yellow-100 text-yellow-800 px-4 py-2 rounded-lg text-center\" Text { text: \"UI Design\" style: \"font-medium\" } } Container { style: \"bg-indigo-100 text-indigo-800 px-4 py-2 rounded-lg text-center\" Text { text: \"Tailwind\" style: \"font-medium\" } } } } } } }","title":"Building a Complete Example"},{"location":"tutorial/first-page/#running-your-page","text":"To see your page in action: # Start the development server jawt run # Your page will be available at http://localhost:6500 The development server includes hot reload, so any changes you make to your JML file will automatically update in the browser.","title":"Running Your Page"},{"location":"tutorial/first-page/#page-properties-reference","text":"The Page component supports several properties for controlling the HTML document: Page { title: \"Page Title\" // Sets <title> tag description: \"Page description\" // Sets meta description favicon: \"/favicon.ico\" // Sets favicon name: \"internal-page-name\" // Internal identifier keywords: \"keyword1, keyword2\" // SEO keywords author: \"Your Name\" // Page author viewport: \"width=device-width, initial-scale=1.0\" // Viewport settings // Your page content Container { // ... } }","title":"Page Properties Reference"},{"location":"tutorial/first-page/#building-for-production","text":"When you're ready to deploy your page: # Build optimised version jawt build # Your HTML file will be in the dist/ directory This creates a dist/ directory with your compiled page file, optimised and ready for deployment to any web server.","title":"Building for Production"},{"location":"tutorial/first-page/#key-takeaways","text":"JML is Declarative : You describe what you want, not how to build it Single Root Component : Pages can only have one direct child (usually a Container or Main ) Built-in Components : Container , Text , and Button cover most basic needs Tailwind Styling : Use the style property with Tailwind utility classes Hot Reload : Changes appear instantly during development","title":"Key Takeaways"},{"location":"tutorial/first-page/#next-steps","text":"Now that you've created your first JAWT page, you might want to explore: Creating reusable components for more complex applications Adding interactive behaviour with JML scripting Building multi-page applications with routing Integrating WebAssembly modules for performance-critical features","title":"Next Steps"},{"location":"tutorial/first-page/#troubleshooting","text":"Page not loading? - Check that your _doctype page declaration is correct - Ensure your JML syntax is valid (proper braces, quotes) - Look for error messages in the terminal running jawt run Styling not appearing? - Verify Tailwind class names are correct - Check that style properties are in quotes - Remember that Tailwind uses specific class names (e.g., text-blue-600 , not text-blue ) Changes not reflecting? - Save your file and wait a moment for hot reload - Check the browser console for any errors - Try stopping and restarting jawt run Congratulations! You've just created your first JAWT page using JML. You've learned the fundamental concepts that will serve as the foundation for building more complex web applications with JAWT.","title":"Troubleshooting"},{"location":"tutorial/project-structure/","text":"JAWT Project Structure Understanding your JAWT project structure is key to learning how to organise a well-designed project\u2014everything has its place, and knowing where to find (and put) things makes development much more efficient. This tutorial will guide you through the anatomy of a JAWT project and explain how each directory and file contributes to your application. Overview A JAWT project follows a convention-over-configuration approach, meaning that by organising your files in the expected structure, everything works seamlessly without additional setup. Think of it as a well-organised workshop where every tool has its designated spot. Basic Project Structure When you run jawt init my-project , you get this foundation: my-project/ \u251c\u2500\u2500 app/ # Pages and routing \u2502 \u2514\u2500\u2500 index.jml # Root page (/) \u251c\u2500\u2500 components/ # Reusable UI components \u251c\u2500\u2500 modules/ # Modules for complex computations \u251c\u2500\u2500 assets/ # Static files (images, fonts, etc.) \u251c\u2500\u2500 app.json # Project metadata \u251c\u2500\u2500 jawt.config.json # Build configuration \u2514\u2500\u2500 dist/ # Build output (created after jawt build) Let's explore each part in detail. The app/ Directory - Your Application Pages The app/ directory is where your application's pages live. It defines how one navigates through your site. Routing Convention JAWT uses file-based routing, where the directory structure directly maps to URL routes: app/ \u251c\u2500\u2500 index.jml # \u2192 / (root page) \u251c\u2500\u2500 about/ \u2502 \u2514\u2500\u2500 index.jml # \u2192 /about \u251c\u2500\u2500 blog/ \u2502 \u251c\u2500\u2500 index.jml # \u2192 /blog \u2502 \u2514\u2500\u2500 [slug].jml # \u2192 /blog/hello-world (dynamic route) \u251c\u2500\u2500 contact/ \u2502 \u2514\u2500\u2500 index.jml # \u2192 /contact \u2514\u2500\u2500 user/ \u251c\u2500\u2500 index.jml # \u2192 /user \u251c\u2500\u2500 [id].jml # \u2192 /user/123 (dynamic route) \u2514\u2500\u2500 [id]/ \u2514\u2500\u2500 settings.jml # \u2192 /user/123/settings Page File Requirements Each page file must: Be named index.jml (for static routes) or use brackets for dynamic routes like [id].jml Start with _doctype page <name> Contain a single Page component as the root Example Page Structure # app/about/index.jml _doctype page about import component Layout from \"components/layout\" Page { title: \"About Us\" description: \"Learn more about our company\" Layout { section: \"about\" } } Dynamic Routes Dynamic routes use square brackets to indicate parameters: # app/blog/[slug].jml _doctype page blogPost import component BlogLayout from \"components/blog-layout\" Page { title: \"Blog Post\" description: \"Read our latest blog content\" BlogLayout { slug: params.slug # Access the dynamic parameter } } The components/ Directory - Reusable UI Building Blocks Think of components as prefabricated modules in construction\u2014they're built once and can be used throughout your project. The components/ directory houses all your reusable UI elements. Component Organisation components/ \u251c\u2500\u2500 layout/ \u2502 \u251c\u2500\u2500 header.jml \u2502 \u251c\u2500\u2500 footer.jml \u2502 \u2514\u2500\u2500 main-layout.jml \u251c\u2500\u2500 ui/ \u2502 \u251c\u2500\u2500 button.jml \u2502 \u251c\u2500\u2500 card.jml \u2502 \u2514\u2500\u2500 modal.jml \u251c\u2500\u2500 forms/ \u2502 \u251c\u2500\u2500 contact-form.jml \u2502 \u2514\u2500\u2500 login-form.jml \u2514\u2500\u2500 navigation/ \u251c\u2500\u2500 navbar.jml \u2514\u2500\u2500 sidebar.jml Component File Structure Each component file must: Start with _doctype component <ComponentName> Export a single component Use PascalCase for component names # components/ui/button.jml _doctype component Button Button { text: props.text || \"Click me\" style: `${props.style || \"\"} px-4 py-2 rounded bg-blue-500 text-white hover:bg-blue-600` onClick: props.onClick } Component Import Patterns Components can be imported in different ways: # Import from components directory (global) import component Header from \"components/layout/header\" # Import from same directory (local) import component Card from \"card\" # Import with alias import component MainButton from \"components/ui/button\" The modules/ Directory - Performance-Critical Code Modules handle computationally intensive tasks that need to run at near-native speed. These compile to WebAssembly (WASM). Module Organisation modules/ \u251c\u2500\u2500 math/ \u2502 \u251c\u2500\u2500 calculations.jml \u2502 \u2514\u2500\u2500 geometry.jml \u251c\u2500\u2500 image/ \u2502 \u2514\u2500\u2500 processing.jml \u2514\u2500\u2500 data/ \u251c\u2500\u2500 sorting.jml \u2514\u2500\u2500 filtering.jml Module File Structure # modules/math/calculations.jml _doctype module calculations export function fibonacci(n: number): number { if (n <= 1) return n; return fibonacci(n - 1) + fibonacci(n - 2); } export function isPrime(n: number): boolean { if (n < 2) return false; for (let i = 2; i <= Math.sqrt(n); i++) { if (n % i === 0) return false; } return true; } Using Modules in Components # components/calculator.jml _doctype component Calculator import browser // for Alert import module math from \"modules/math/calculations\" Container { style: \"p-4\" Button { text: \"Calculate Fibonacci\" onClick: () => { const result = math.fibonacci(10); browser.Alert(`Fibonacci(10) = ${result}`); } } } The assets/ Directory - Static Resources The assets directory is like a storage room for all your non-code files\u2014images, fonts, stylesheets, and other static resources. Asset Organisation assets/ \u251c\u2500\u2500 images/ \u2502 \u251c\u2500\u2500 logo.svg \u2502 \u251c\u2500\u2500 hero-bg.jpg \u2502 \u2514\u2500\u2500 icons/ \u2502 \u251c\u2500\u2500 home.svg \u2502 \u2514\u2500\u2500 user.svg \u251c\u2500\u2500 fonts/ \u2502 \u251c\u2500\u2500 custom-font.woff2 \u2502 \u2514\u2500\u2500 icons.ttf \u251c\u2500\u2500 styles/ \u2502 \u2514\u2500\u2500 custom.css \u2514\u2500\u2500 data/ \u251c\u2500\u2500 config.json \u2514\u2500\u2500 content.json Using Assets Assets can be referenced from anywhere in your project: # In a page or component Container { style: \"bg-cover bg-center min-h-screen\" backgroundImage: \"url('/assets/images/hero-bg.jpg')\" Image { src: \"/assets/images/logo.svg\" alt: \"Company Logo\" style: \"w-32 h-32\" } } Configuration Files app.json - Project Metadata This file contains basic information about your project: { \"name\": \"my-jawt-app\", \"version\": \"1.0.0\", \"description\": \"My awesome JAWT application\", \"author\": \"Your Name\" } jawt.config.json - Build Configuration This file controls how your project is built and served: { \"build\": { \"outDir\": \"dist\", \"assetsDir\": \"assets\", \"minify\": true, }, \"server\": { \"port\": 6500, \"host\": \"localhost\", \"https\": false, \"open\": true }, \"paths\": { \"pages\": \"app\", \"components\": \"components\", \"modules\": \"modules\", \"assets\": \"assets\" } } The dist/ Directory - Build Output After running jawt build , the dist/ directory contains your compiled application: dist/ \u251c\u2500\u2500 index.html # Compiled root page \u251c\u2500\u2500 about/ \u2502 \u2514\u2500\u2500 index.html # Compiled about page \u251c\u2500\u2500 assets/ \u2502 \u251c\u2500\u2500 js/ \u2502 \u2502 \u251c\u2500\u2500 components.js # Compiled components \u2502 \u2502 \u2514\u2500\u2500 modules.wasm # Compiled modules \u2502 \u251c\u2500\u2500 css/ \u2502 \u2502 \u2514\u2500\u2500 styles.css # Compiled styles \u2502 \u2514\u2500\u2500 images/ \u2502 \u2514\u2500\u2500 ... # Optimised images \u2514\u2500\u2500 manifest.json # Build manifest Project Structure Best Practices 1. Logical Grouping Organise components by functionality rather than type: components/ \u251c\u2500\u2500 auth/ # Authentication-related components \u2502 \u251c\u2500\u2500 login-form.jml \u2502 \u2514\u2500\u2500 signup-form.jml \u251c\u2500\u2500 dashboard/ # Dashboard-specific components \u2502 \u251c\u2500\u2500 stats-card.jml \u2502 \u2514\u2500\u2500 chart.jml \u2514\u2500\u2500 common/ # Shared components \u251c\u2500\u2500 button.jml \u2514\u2500\u2500 modal.jml 2. Consistent Naming Use clear, descriptive names: # Good components/user/profile-card.jml components/navigation/main-menu.jml # Avoid components/card.jml components/menu.jml 3. Depth Considerations Keep directory nesting reasonable (3-4 levels maximum): # Good components/forms/contact/contact-form.jml # Too deep components/ui/forms/contact/complex/contact-form.jml Complete Example Project Structure Here's what a real-world JAWT project might look like: my-blog/ \u251c\u2500\u2500 app/ \u2502 \u251c\u2500\u2500 index.jml # Home page \u2502 \u251c\u2500\u2500 about/ \u2502 \u2502 \u2514\u2500\u2500 index.jml # About page \u2502 \u251c\u2500\u2500 blog/ \u2502 \u2502 \u251c\u2500\u2500 index.jml # Blog listing \u2502 \u2502 \u2514\u2500\u2500 [slug].jml # Individual post \u2502 \u2514\u2500\u2500 contact/ \u2502 \u2514\u2500\u2500 index.jml # Contact page \u251c\u2500\u2500 components/ \u2502 \u251c\u2500\u2500 layout/ \u2502 \u2502 \u251c\u2500\u2500 header.jml # Site header \u2502 \u2502 \u251c\u2500\u2500 footer.jml # Site footer \u2502 \u2502 \u2514\u2500\u2500 main-layout.jml # Main layout wrapper \u2502 \u251c\u2500\u2500 blog/ \u2502 \u2502 \u251c\u2500\u2500 post-card.jml # Blog post preview \u2502 \u2502 \u251c\u2500\u2500 post-content.jml # Full post display \u2502 \u2502 \u2514\u2500\u2500 post-list.jml # List of posts \u2502 \u251c\u2500\u2500 ui/ \u2502 \u2502 \u251c\u2500\u2500 button.jml # Reusable button \u2502 \u2502 \u251c\u2500\u2500 card.jml # Card component \u2502 \u2502 \u2514\u2500\u2500 modal.jml # Modal dialog \u2502 \u2514\u2500\u2500 forms/ \u2502 \u2514\u2500\u2500 contact-form.jml # Contact form \u251c\u2500\u2500 modules/ \u2502 \u251c\u2500\u2500 content/ \u2502 \u2502 \u2514\u2500\u2500 markdown-parser.jml # Markdown processing \u2502 \u2514\u2500\u2500 utils/ \u2502 \u2514\u2500\u2500 date-formatter.jml # Date utilities \u251c\u2500\u2500 assets/ \u2502 \u251c\u2500\u2500 images/ \u2502 \u2502 \u251c\u2500\u2500 logo.svg \u2502 \u2502 \u2514\u2500\u2500 blog/ \u2502 \u2502 \u251c\u2500\u2500 post1-hero.jpg \u2502 \u2502 \u2514\u2500\u2500 post2-hero.jpg \u2502 \u251c\u2500\u2500 fonts/ \u2502 \u2502 \u2514\u2500\u2500 custom-font.woff2 \u2502 \u2514\u2500\u2500 data/ \u2502 \u2514\u2500\u2500 blog-posts.json \u251c\u2500\u2500 app.json \u251c\u2500\u2500 jawt.config.json \u2514\u2500\u2500 dist/ # Generated after build Common Patterns and Conventions Page-Specific Components Sometimes you need components that are only used by a single page: app/ \u251c\u2500\u2500 dashboard/ \u2502 \u251c\u2500\u2500 index.jml # Dashboard page \u2502 \u251c\u2500\u2500 stats-widget.jml # Page-specific component \u2502 \u2514\u2500\u2500 chart-container.jml # Page-specific component Import page-specific components using relative paths: # In app/dashboard/index.jml import component StatsWidget from \"stats-widget\" import component ChartContainer from \"chart-container\" Shared Layouts Create layout components for consistent page structure: # components/layout/standard-layout.jml _doctype component StandardLayout Container { style: \"min-h-screen bg-gray-50\" Header { title: props.title } Main { style: \"container mx-auto px-4 py-8\" content: props.children } Footer {} } Configuration-Based Routing Use configuration files to manage complex routing: # assets/data/routes.json { \"routes\": [ { \"path\": \"/\", \"component\": \"home\", \"title\": \"Home\" }, { \"path\": \"/blog/:slug\", \"component\": \"blog-post\", \"title\": \"Blog Post\" } ] } Development Workflow Starting Development # Navigate to project directory cd my-project # Start development server jawt run # In another terminal, start debugger (optional) jawt debug Building for Production # Build optimised version jawt build # Serve production build locally for testing jawt serve Project Maintenance # Check project structure ls -la app/ components/ modules/ # Validate configuration cat jawt.config.json # Clean build artifacts rm -rf dist/ Troubleshooting Common Issues Import Resolution Problems Problem : Component not found error Solution : Check import paths and ensure components are in the correct directory # Correct import component Button from \"components/ui/button\" # Incorrect import component Button from \"ui/button\" Routing Issues Problem : Page not accessible Solution : Verify file naming and directory structure # Correct for /about route app/about/index.jml # Incorrect app/about.jml Build Configuration Problems Problem : Assets not found after build Solution : Check jawt.config.json paths configuration { \"paths\": { \"assets\": \"assets\" // Ensure this matches your directory } } Next Steps Now that you understand JAWT project structure, you can: Organise Existing Projects : Restructure your current projects following these conventions Plan New Projects : Design your directory structure before you start coding Explore Advanced Features : Look into custom build configurations and optimisations Create Templates : Build project templates for common patterns you use Key Takeaways Convention Over Configuration : Following JAWT's expected structure makes everything work seamlessly Logical Organisation : Group related files together for easier maintenance Clear Separation : Pages, components, and modules each have their designated purpose and location Scalable Structure : The pattern works for both small projects and large applications Import Flexibility : Use both absolute and relative imports as appropriate You can now create well-organised, maintainable applications that scale as your projects grow.","title":"Project Structure"},{"location":"tutorial/project-structure/#jawt-project-structure","text":"Understanding your JAWT project structure is key to learning how to organise a well-designed project\u2014everything has its place, and knowing where to find (and put) things makes development much more efficient. This tutorial will guide you through the anatomy of a JAWT project and explain how each directory and file contributes to your application.","title":"JAWT Project Structure"},{"location":"tutorial/project-structure/#overview","text":"A JAWT project follows a convention-over-configuration approach, meaning that by organising your files in the expected structure, everything works seamlessly without additional setup. Think of it as a well-organised workshop where every tool has its designated spot.","title":"Overview"},{"location":"tutorial/project-structure/#basic-project-structure","text":"When you run jawt init my-project , you get this foundation: my-project/ \u251c\u2500\u2500 app/ # Pages and routing \u2502 \u2514\u2500\u2500 index.jml # Root page (/) \u251c\u2500\u2500 components/ # Reusable UI components \u251c\u2500\u2500 modules/ # Modules for complex computations \u251c\u2500\u2500 assets/ # Static files (images, fonts, etc.) \u251c\u2500\u2500 app.json # Project metadata \u251c\u2500\u2500 jawt.config.json # Build configuration \u2514\u2500\u2500 dist/ # Build output (created after jawt build) Let's explore each part in detail.","title":"Basic Project Structure"},{"location":"tutorial/project-structure/#the-app-directory-your-application-pages","text":"The app/ directory is where your application's pages live. It defines how one navigates through your site.","title":"The app/ Directory - Your Application Pages"},{"location":"tutorial/project-structure/#routing-convention","text":"JAWT uses file-based routing, where the directory structure directly maps to URL routes: app/ \u251c\u2500\u2500 index.jml # \u2192 / (root page) \u251c\u2500\u2500 about/ \u2502 \u2514\u2500\u2500 index.jml # \u2192 /about \u251c\u2500\u2500 blog/ \u2502 \u251c\u2500\u2500 index.jml # \u2192 /blog \u2502 \u2514\u2500\u2500 [slug].jml # \u2192 /blog/hello-world (dynamic route) \u251c\u2500\u2500 contact/ \u2502 \u2514\u2500\u2500 index.jml # \u2192 /contact \u2514\u2500\u2500 user/ \u251c\u2500\u2500 index.jml # \u2192 /user \u251c\u2500\u2500 [id].jml # \u2192 /user/123 (dynamic route) \u2514\u2500\u2500 [id]/ \u2514\u2500\u2500 settings.jml # \u2192 /user/123/settings","title":"Routing Convention"},{"location":"tutorial/project-structure/#page-file-requirements","text":"Each page file must: Be named index.jml (for static routes) or use brackets for dynamic routes like [id].jml Start with _doctype page <name> Contain a single Page component as the root","title":"Page File Requirements"},{"location":"tutorial/project-structure/#example-page-structure","text":"# app/about/index.jml _doctype page about import component Layout from \"components/layout\" Page { title: \"About Us\" description: \"Learn more about our company\" Layout { section: \"about\" } }","title":"Example Page Structure"},{"location":"tutorial/project-structure/#dynamic-routes","text":"Dynamic routes use square brackets to indicate parameters: # app/blog/[slug].jml _doctype page blogPost import component BlogLayout from \"components/blog-layout\" Page { title: \"Blog Post\" description: \"Read our latest blog content\" BlogLayout { slug: params.slug # Access the dynamic parameter } }","title":"Dynamic Routes"},{"location":"tutorial/project-structure/#the-components-directory-reusable-ui-building-blocks","text":"Think of components as prefabricated modules in construction\u2014they're built once and can be used throughout your project. The components/ directory houses all your reusable UI elements.","title":"The components/ Directory - Reusable UI Building Blocks"},{"location":"tutorial/project-structure/#component-organisation","text":"components/ \u251c\u2500\u2500 layout/ \u2502 \u251c\u2500\u2500 header.jml \u2502 \u251c\u2500\u2500 footer.jml \u2502 \u2514\u2500\u2500 main-layout.jml \u251c\u2500\u2500 ui/ \u2502 \u251c\u2500\u2500 button.jml \u2502 \u251c\u2500\u2500 card.jml \u2502 \u2514\u2500\u2500 modal.jml \u251c\u2500\u2500 forms/ \u2502 \u251c\u2500\u2500 contact-form.jml \u2502 \u2514\u2500\u2500 login-form.jml \u2514\u2500\u2500 navigation/ \u251c\u2500\u2500 navbar.jml \u2514\u2500\u2500 sidebar.jml","title":"Component Organisation"},{"location":"tutorial/project-structure/#component-file-structure","text":"Each component file must: Start with _doctype component <ComponentName> Export a single component Use PascalCase for component names # components/ui/button.jml _doctype component Button Button { text: props.text || \"Click me\" style: `${props.style || \"\"} px-4 py-2 rounded bg-blue-500 text-white hover:bg-blue-600` onClick: props.onClick }","title":"Component File Structure"},{"location":"tutorial/project-structure/#component-import-patterns","text":"Components can be imported in different ways: # Import from components directory (global) import component Header from \"components/layout/header\" # Import from same directory (local) import component Card from \"card\" # Import with alias import component MainButton from \"components/ui/button\"","title":"Component Import Patterns"},{"location":"tutorial/project-structure/#the-modules-directory-performance-critical-code","text":"Modules handle computationally intensive tasks that need to run at near-native speed. These compile to WebAssembly (WASM).","title":"The modules/ Directory - Performance-Critical Code"},{"location":"tutorial/project-structure/#module-organisation","text":"modules/ \u251c\u2500\u2500 math/ \u2502 \u251c\u2500\u2500 calculations.jml \u2502 \u2514\u2500\u2500 geometry.jml \u251c\u2500\u2500 image/ \u2502 \u2514\u2500\u2500 processing.jml \u2514\u2500\u2500 data/ \u251c\u2500\u2500 sorting.jml \u2514\u2500\u2500 filtering.jml","title":"Module Organisation"},{"location":"tutorial/project-structure/#module-file-structure","text":"# modules/math/calculations.jml _doctype module calculations export function fibonacci(n: number): number { if (n <= 1) return n; return fibonacci(n - 1) + fibonacci(n - 2); } export function isPrime(n: number): boolean { if (n < 2) return false; for (let i = 2; i <= Math.sqrt(n); i++) { if (n % i === 0) return false; } return true; }","title":"Module File Structure"},{"location":"tutorial/project-structure/#using-modules-in-components","text":"# components/calculator.jml _doctype component Calculator import browser // for Alert import module math from \"modules/math/calculations\" Container { style: \"p-4\" Button { text: \"Calculate Fibonacci\" onClick: () => { const result = math.fibonacci(10); browser.Alert(`Fibonacci(10) = ${result}`); } } }","title":"Using Modules in Components"},{"location":"tutorial/project-structure/#the-assets-directory-static-resources","text":"The assets directory is like a storage room for all your non-code files\u2014images, fonts, stylesheets, and other static resources.","title":"The assets/ Directory - Static Resources"},{"location":"tutorial/project-structure/#asset-organisation","text":"assets/ \u251c\u2500\u2500 images/ \u2502 \u251c\u2500\u2500 logo.svg \u2502 \u251c\u2500\u2500 hero-bg.jpg \u2502 \u2514\u2500\u2500 icons/ \u2502 \u251c\u2500\u2500 home.svg \u2502 \u2514\u2500\u2500 user.svg \u251c\u2500\u2500 fonts/ \u2502 \u251c\u2500\u2500 custom-font.woff2 \u2502 \u2514\u2500\u2500 icons.ttf \u251c\u2500\u2500 styles/ \u2502 \u2514\u2500\u2500 custom.css \u2514\u2500\u2500 data/ \u251c\u2500\u2500 config.json \u2514\u2500\u2500 content.json","title":"Asset Organisation"},{"location":"tutorial/project-structure/#using-assets","text":"Assets can be referenced from anywhere in your project: # In a page or component Container { style: \"bg-cover bg-center min-h-screen\" backgroundImage: \"url('/assets/images/hero-bg.jpg')\" Image { src: \"/assets/images/logo.svg\" alt: \"Company Logo\" style: \"w-32 h-32\" } }","title":"Using Assets"},{"location":"tutorial/project-structure/#configuration-files","text":"","title":"Configuration Files"},{"location":"tutorial/project-structure/#appjson-project-metadata","text":"This file contains basic information about your project: { \"name\": \"my-jawt-app\", \"version\": \"1.0.0\", \"description\": \"My awesome JAWT application\", \"author\": \"Your Name\" }","title":"app.json - Project Metadata"},{"location":"tutorial/project-structure/#jawtconfigjson-build-configuration","text":"This file controls how your project is built and served: { \"build\": { \"outDir\": \"dist\", \"assetsDir\": \"assets\", \"minify\": true, }, \"server\": { \"port\": 6500, \"host\": \"localhost\", \"https\": false, \"open\": true }, \"paths\": { \"pages\": \"app\", \"components\": \"components\", \"modules\": \"modules\", \"assets\": \"assets\" } }","title":"jawt.config.json - Build Configuration"},{"location":"tutorial/project-structure/#the-dist-directory-build-output","text":"After running jawt build , the dist/ directory contains your compiled application: dist/ \u251c\u2500\u2500 index.html # Compiled root page \u251c\u2500\u2500 about/ \u2502 \u2514\u2500\u2500 index.html # Compiled about page \u251c\u2500\u2500 assets/ \u2502 \u251c\u2500\u2500 js/ \u2502 \u2502 \u251c\u2500\u2500 components.js # Compiled components \u2502 \u2502 \u2514\u2500\u2500 modules.wasm # Compiled modules \u2502 \u251c\u2500\u2500 css/ \u2502 \u2502 \u2514\u2500\u2500 styles.css # Compiled styles \u2502 \u2514\u2500\u2500 images/ \u2502 \u2514\u2500\u2500 ... # Optimised images \u2514\u2500\u2500 manifest.json # Build manifest","title":"The dist/ Directory - Build Output"},{"location":"tutorial/project-structure/#project-structure-best-practices","text":"","title":"Project Structure Best Practices"},{"location":"tutorial/project-structure/#1-logical-grouping","text":"Organise components by functionality rather than type: components/ \u251c\u2500\u2500 auth/ # Authentication-related components \u2502 \u251c\u2500\u2500 login-form.jml \u2502 \u2514\u2500\u2500 signup-form.jml \u251c\u2500\u2500 dashboard/ # Dashboard-specific components \u2502 \u251c\u2500\u2500 stats-card.jml \u2502 \u2514\u2500\u2500 chart.jml \u2514\u2500\u2500 common/ # Shared components \u251c\u2500\u2500 button.jml \u2514\u2500\u2500 modal.jml","title":"1. Logical Grouping"},{"location":"tutorial/project-structure/#2-consistent-naming","text":"Use clear, descriptive names: # Good components/user/profile-card.jml components/navigation/main-menu.jml # Avoid components/card.jml components/menu.jml","title":"2. Consistent Naming"},{"location":"tutorial/project-structure/#3-depth-considerations","text":"Keep directory nesting reasonable (3-4 levels maximum): # Good components/forms/contact/contact-form.jml # Too deep components/ui/forms/contact/complex/contact-form.jml","title":"3. Depth Considerations"},{"location":"tutorial/project-structure/#complete-example-project-structure","text":"Here's what a real-world JAWT project might look like: my-blog/ \u251c\u2500\u2500 app/ \u2502 \u251c\u2500\u2500 index.jml # Home page \u2502 \u251c\u2500\u2500 about/ \u2502 \u2502 \u2514\u2500\u2500 index.jml # About page \u2502 \u251c\u2500\u2500 blog/ \u2502 \u2502 \u251c\u2500\u2500 index.jml # Blog listing \u2502 \u2502 \u2514\u2500\u2500 [slug].jml # Individual post \u2502 \u2514\u2500\u2500 contact/ \u2502 \u2514\u2500\u2500 index.jml # Contact page \u251c\u2500\u2500 components/ \u2502 \u251c\u2500\u2500 layout/ \u2502 \u2502 \u251c\u2500\u2500 header.jml # Site header \u2502 \u2502 \u251c\u2500\u2500 footer.jml # Site footer \u2502 \u2502 \u2514\u2500\u2500 main-layout.jml # Main layout wrapper \u2502 \u251c\u2500\u2500 blog/ \u2502 \u2502 \u251c\u2500\u2500 post-card.jml # Blog post preview \u2502 \u2502 \u251c\u2500\u2500 post-content.jml # Full post display \u2502 \u2502 \u2514\u2500\u2500 post-list.jml # List of posts \u2502 \u251c\u2500\u2500 ui/ \u2502 \u2502 \u251c\u2500\u2500 button.jml # Reusable button \u2502 \u2502 \u251c\u2500\u2500 card.jml # Card component \u2502 \u2502 \u2514\u2500\u2500 modal.jml # Modal dialog \u2502 \u2514\u2500\u2500 forms/ \u2502 \u2514\u2500\u2500 contact-form.jml # Contact form \u251c\u2500\u2500 modules/ \u2502 \u251c\u2500\u2500 content/ \u2502 \u2502 \u2514\u2500\u2500 markdown-parser.jml # Markdown processing \u2502 \u2514\u2500\u2500 utils/ \u2502 \u2514\u2500\u2500 date-formatter.jml # Date utilities \u251c\u2500\u2500 assets/ \u2502 \u251c\u2500\u2500 images/ \u2502 \u2502 \u251c\u2500\u2500 logo.svg \u2502 \u2502 \u2514\u2500\u2500 blog/ \u2502 \u2502 \u251c\u2500\u2500 post1-hero.jpg \u2502 \u2502 \u2514\u2500\u2500 post2-hero.jpg \u2502 \u251c\u2500\u2500 fonts/ \u2502 \u2502 \u2514\u2500\u2500 custom-font.woff2 \u2502 \u2514\u2500\u2500 data/ \u2502 \u2514\u2500\u2500 blog-posts.json \u251c\u2500\u2500 app.json \u251c\u2500\u2500 jawt.config.json \u2514\u2500\u2500 dist/ # Generated after build","title":"Complete Example Project Structure"},{"location":"tutorial/project-structure/#common-patterns-and-conventions","text":"","title":"Common Patterns and Conventions"},{"location":"tutorial/project-structure/#page-specific-components","text":"Sometimes you need components that are only used by a single page: app/ \u251c\u2500\u2500 dashboard/ \u2502 \u251c\u2500\u2500 index.jml # Dashboard page \u2502 \u251c\u2500\u2500 stats-widget.jml # Page-specific component \u2502 \u2514\u2500\u2500 chart-container.jml # Page-specific component Import page-specific components using relative paths: # In app/dashboard/index.jml import component StatsWidget from \"stats-widget\" import component ChartContainer from \"chart-container\"","title":"Page-Specific Components"},{"location":"tutorial/project-structure/#shared-layouts","text":"Create layout components for consistent page structure: # components/layout/standard-layout.jml _doctype component StandardLayout Container { style: \"min-h-screen bg-gray-50\" Header { title: props.title } Main { style: \"container mx-auto px-4 py-8\" content: props.children } Footer {} }","title":"Shared Layouts"},{"location":"tutorial/project-structure/#configuration-based-routing","text":"Use configuration files to manage complex routing: # assets/data/routes.json { \"routes\": [ { \"path\": \"/\", \"component\": \"home\", \"title\": \"Home\" }, { \"path\": \"/blog/:slug\", \"component\": \"blog-post\", \"title\": \"Blog Post\" } ] }","title":"Configuration-Based Routing"},{"location":"tutorial/project-structure/#development-workflow","text":"","title":"Development Workflow"},{"location":"tutorial/project-structure/#starting-development","text":"# Navigate to project directory cd my-project # Start development server jawt run # In another terminal, start debugger (optional) jawt debug","title":"Starting Development"},{"location":"tutorial/project-structure/#building-for-production","text":"# Build optimised version jawt build # Serve production build locally for testing jawt serve","title":"Building for Production"},{"location":"tutorial/project-structure/#project-maintenance","text":"# Check project structure ls -la app/ components/ modules/ # Validate configuration cat jawt.config.json # Clean build artifacts rm -rf dist/","title":"Project Maintenance"},{"location":"tutorial/project-structure/#troubleshooting-common-issues","text":"","title":"Troubleshooting Common Issues"},{"location":"tutorial/project-structure/#import-resolution-problems","text":"Problem : Component not found error Solution : Check import paths and ensure components are in the correct directory # Correct import component Button from \"components/ui/button\" # Incorrect import component Button from \"ui/button\"","title":"Import Resolution Problems"},{"location":"tutorial/project-structure/#routing-issues","text":"Problem : Page not accessible Solution : Verify file naming and directory structure # Correct for /about route app/about/index.jml # Incorrect app/about.jml","title":"Routing Issues"},{"location":"tutorial/project-structure/#build-configuration-problems","text":"Problem : Assets not found after build Solution : Check jawt.config.json paths configuration { \"paths\": { \"assets\": \"assets\" // Ensure this matches your directory } }","title":"Build Configuration Problems"},{"location":"tutorial/project-structure/#next-steps","text":"Now that you understand JAWT project structure, you can: Organise Existing Projects : Restructure your current projects following these conventions Plan New Projects : Design your directory structure before you start coding Explore Advanced Features : Look into custom build configurations and optimisations Create Templates : Build project templates for common patterns you use","title":"Next Steps"},{"location":"tutorial/project-structure/#key-takeaways","text":"Convention Over Configuration : Following JAWT's expected structure makes everything work seamlessly Logical Organisation : Group related files together for easier maintenance Clear Separation : Pages, components, and modules each have their designated purpose and location Scalable Structure : The pattern works for both small projects and large applications Import Flexibility : Use both absolute and relative imports as appropriate You can now create well-organised, maintainable applications that scale as your projects grow.","title":"Key Takeaways"}]}